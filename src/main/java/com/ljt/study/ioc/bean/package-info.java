/**
 * @author LiJingTang
 * @version 2019年3月31日 上午10:28:19
 */
package com.ljt.study.ioc.bean;

/**
	命名Bean
 	每个bean有一个或者多个标识符。这些标识符必须在托管bean的容器内唯一。通常一个bean只有一个标识符，但如果它需要多个的话，其它的可以被认为是别名。
 	在基于XML的配置元数据中，你可以使用id和/或name属性来指定bean的标识符。id属性允许你指定一个准确的id。可能是特殊字符。
 	如果你想为bean引入别名，你也可以在name属性中来指定，通过逗号（,），分号（;）或空格来分隔。
 	当然你也可以不给bean提供name或id。如果没有提供明确的name或id，那么容器会为这个bean生成一个唯一的名称。
 	然而，如果你想通过名称来参考这个bean，那么可以使用ref元素或者是服务定位器风格的查找，你必须提供一个名称。不提供名称的动机是和使用内部bean或自动装备合作者相关的。
 
 	实例化Bean
 	bean的定义信息本质上是创建一个或多个对象的方子。当需要一个bean时，容器查找这些方子来查找命名的bean， 	并且使用由bean定义信息封装的配置元数据来创建（或获得）一个真实的对象。
 	和使用静态工厂方法实例化相似，使用实例工厂方法实例化是要调用容器中已有bean的一个非静态的方法来创建新的bean。
 	要使用这个机制，请把class属性留空，但在factory-bean属性中指定当前（或父/祖先）容器中bean的名字，该bean要包含被调用来创建对象的实例方法。使用factory-method方法来设置工厂方法的名称。
 	
 	
 	内部bean的定义不需要定义id或name；容器忽略这些值。也会忽略scope标识。
 	内部bean通常是匿名的，而且范围通常是prototype的。注入内部bean到协作bean是不可能的，只能到包围它的bean中。
 	
 */